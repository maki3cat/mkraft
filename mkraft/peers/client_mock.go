// Code generated by MockGen. DO NOT EDIT.
// Source: mkraft/peers/client.go
//
// Generated by this command:
//
//	mockgen -source=mkraft/peers/client.go -destination=./mkraft/peers/client_mock.go -package peers
//

// Package peers is a generated GoMock package.
package peers

import (
	context "context"
	reflect "reflect"

	rpc "github.com/maki3cat/mkraft/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockPeerClient is a mock of PeerClient interface.
type MockPeerClient struct {
	ctrl     *gomock.Controller
	recorder *MockPeerClientMockRecorder
	isgomock struct{}
}

// MockPeerClientMockRecorder is the mock recorder for MockPeerClient.
type MockPeerClientMockRecorder struct {
	mock *MockPeerClient
}

// NewMockPeerClient creates a new mock instance.
func NewMockPeerClient(ctrl *gomock.Controller) *MockPeerClient {
	mock := &MockPeerClient{ctrl: ctrl}
	mock.recorder = &MockPeerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerClient) EXPECT() *MockPeerClientMockRecorder {
	return m.recorder
}

// AppendEntriesWithRetry mocks base method.
func (m *MockPeerClient) AppendEntriesWithRetry(ctx context.Context, req *rpc.AppendEntriesRequest) (*rpc.AppendEntriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendEntriesWithRetry", ctx, req)
	ret0, _ := ret[0].(*rpc.AppendEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEntriesWithRetry indicates an expected call of AppendEntriesWithRetry.
func (mr *MockPeerClientMockRecorder) AppendEntriesWithRetry(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntriesWithRetry", reflect.TypeOf((*MockPeerClient)(nil).AppendEntriesWithRetry), ctx, req)
}

// Close mocks base method.
func (m *MockPeerClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPeerClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPeerClient)(nil).Close))
}

// GetNodeID mocks base method.
func (m *MockPeerClient) GetNodeID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeID indicates an expected call of GetNodeID.
func (mr *MockPeerClientMockRecorder) GetNodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeID", reflect.TypeOf((*MockPeerClient)(nil).GetNodeID))
}

// PeerConnCheck mocks base method.
func (m *MockPeerClient) PeerConnCheck(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerConnCheck", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PeerConnCheck indicates an expected call of PeerConnCheck.
func (mr *MockPeerClientMockRecorder) PeerConnCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerConnCheck", reflect.TypeOf((*MockPeerClient)(nil).PeerConnCheck), ctx)
}

// RequestVote mocks base method.
func (m *MockPeerClient) RequestVote(ctx context.Context, req *rpc.RequestVoteRequest) (*rpc.RequestVoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestVote", ctx, req)
	ret0, _ := ret[0].(*rpc.RequestVoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVote indicates an expected call of RequestVote.
func (mr *MockPeerClientMockRecorder) RequestVote(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVote", reflect.TypeOf((*MockPeerClient)(nil).RequestVote), ctx, req)
}
