// Code generated by MockGen. DO NOT EDIT.
// Source: mkraft/peers/membership.go
//
// Generated by this command:
//
//	mockgen -source=mkraft/peers/membership.go -destination=./mkraft/peers/membership_mock.go -package peers
//

// Package peers is a generated GoMock package.
package peers

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMembership is a mock of Membership interface.
type MockMembership struct {
	ctrl     *gomock.Controller
	recorder *MockMembershipMockRecorder
	isgomock struct{}
}

// MockMembershipMockRecorder is the mock recorder for MockMembership.
type MockMembershipMockRecorder struct {
	mock *MockMembership
}

// NewMockMembership creates a new mock instance.
func NewMockMembership(ctrl *gomock.Controller) *MockMembership {
	mock := &MockMembership{ctrl: ctrl}
	mock.recorder = &MockMembershipMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMembership) EXPECT() *MockMembershipMockRecorder {
	return m.recorder
}

// GetAllPeerClients mocks base method.
func (m *MockMembership) GetAllPeerClients() ([]PeerClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPeerClients")
	ret0, _ := ret[0].([]PeerClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPeerClients indicates an expected call of GetAllPeerClients.
func (mr *MockMembershipMockRecorder) GetAllPeerClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPeerClients", reflect.TypeOf((*MockMembership)(nil).GetAllPeerClients))
}

// GetAllPeerClientsV2 mocks base method.
func (m *MockMembership) GetAllPeerClientsV2() (map[string]PeerClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPeerClientsV2")
	ret0, _ := ret[0].(map[string]PeerClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPeerClientsV2 indicates an expected call of GetAllPeerClientsV2.
func (mr *MockMembershipMockRecorder) GetAllPeerClientsV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPeerClientsV2", reflect.TypeOf((*MockMembership)(nil).GetAllPeerClientsV2))
}

// GetAllPeerNodeIDs mocks base method.
func (m *MockMembership) GetAllPeerNodeIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPeerNodeIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPeerNodeIDs indicates an expected call of GetAllPeerNodeIDs.
func (mr *MockMembershipMockRecorder) GetAllPeerNodeIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPeerNodeIDs", reflect.TypeOf((*MockMembership)(nil).GetAllPeerNodeIDs))
}

// GetTotalMemberCount mocks base method.
func (m *MockMembership) GetTotalMemberCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalMemberCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTotalMemberCount indicates an expected call of GetTotalMemberCount.
func (mr *MockMembershipMockRecorder) GetTotalMemberCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalMemberCount", reflect.TypeOf((*MockMembership)(nil).GetTotalMemberCount))
}

// GracefulStop mocks base method.
func (m *MockMembership) GracefulStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GracefulStop")
}

// GracefulStop indicates an expected call of GracefulStop.
func (mr *MockMembershipMockRecorder) GracefulStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulStop", reflect.TypeOf((*MockMembership)(nil).GracefulStop))
}

// Start mocks base method.
func (m *MockMembership) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockMembershipMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMembership)(nil).Start), ctx)
}

// TriggerRefresh mocks base method.
func (m *MockMembership) TriggerRefresh(nodeID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TriggerRefresh", nodeID)
}

// TriggerRefresh indicates an expected call of TriggerRefresh.
func (mr *MockMembershipMockRecorder) TriggerRefresh(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerRefresh", reflect.TypeOf((*MockMembership)(nil).TriggerRefresh), nodeID)
}
