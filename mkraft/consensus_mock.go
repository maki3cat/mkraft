// Code generated by MockGen. DO NOT EDIT.
// Source: mkraft/consensus.go
//
// Generated by this command:
//
//	mockgen -source=mkraft/consensus.go -destination=./mkraft/consensus_mock.go -package mkraft
//

// Package mkraft is a generated GoMock package.
package mkraft

import (
	context "context"
	reflect "reflect"

	rpc "github.com/maki3cat/mkraft/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockConsensusIface is a mock of ConsensusIface interface.
type MockConsensusIface struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusIfaceMockRecorder
	isgomock struct{}
}

// MockConsensusIfaceMockRecorder is the mock recorder for MockConsensusIface.
type MockConsensusIfaceMockRecorder struct {
	mock *MockConsensusIface
}

// NewMockConsensusIface creates a new mock instance.
func NewMockConsensusIface(ctrl *gomock.Controller) *MockConsensusIface {
	mock := &MockConsensusIface{ctrl: ctrl}
	mock.recorder = &MockConsensusIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensusIface) EXPECT() *MockConsensusIfaceMockRecorder {
	return m.recorder
}

// AppendEntriesSendForConsensus mocks base method.
func (m *MockConsensusIface) AppendEntriesSendForConsensus(ctx context.Context, reqForEachPeer map[string]*rpc.AppendEntriesRequest, currentTerm uint32) (*AppendEntriesConsensusResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendEntriesSendForConsensus", ctx, reqForEachPeer, currentTerm)
	ret0, _ := ret[0].(*AppendEntriesConsensusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEntriesSendForConsensus indicates an expected call of AppendEntriesSendForConsensus.
func (mr *MockConsensusIfaceMockRecorder) AppendEntriesSendForConsensus(ctx, reqForEachPeer, currentTerm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntriesSendForConsensus", reflect.TypeOf((*MockConsensusIface)(nil).AppendEntriesSendForConsensus), ctx, reqForEachPeer, currentTerm)
}

// RequestVoteSendForConsensus mocks base method.
func (m *MockConsensusIface) RequestVoteSendForConsensus(ctx context.Context, request *rpc.RequestVoteRequest) (*MajorityRequestVoteResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestVoteSendForConsensus", ctx, request)
	ret0, _ := ret[0].(*MajorityRequestVoteResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVoteSendForConsensus indicates an expected call of RequestVoteSendForConsensus.
func (mr *MockConsensusIfaceMockRecorder) RequestVoteSendForConsensus(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVoteSendForConsensus", reflect.TypeOf((*MockConsensusIface)(nil).RequestVoteSendForConsensus), ctx, request)
}
