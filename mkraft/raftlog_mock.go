// Code generated by MockGen. DO NOT EDIT.
// Source: mkraft/raftlog.go
//
// Generated by this command:
//
//	mockgen -source=mkraft/raftlog.go -destination=./mkraft/raftlog_mock.go -package mkraft
//

// Package mkraft is a generated GoMock package.
package mkraft

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRaftLogsIface is a mock of RaftLogsIface interface.
type MockRaftLogsIface struct {
	ctrl     *gomock.Controller
	recorder *MockRaftLogsIfaceMockRecorder
	isgomock struct{}
}

// MockRaftLogsIfaceMockRecorder is the mock recorder for MockRaftLogsIface.
type MockRaftLogsIfaceMockRecorder struct {
	mock *MockRaftLogsIface
}

// NewMockRaftLogsIface creates a new mock instance.
func NewMockRaftLogsIface(ctrl *gomock.Controller) *MockRaftLogsIface {
	mock := &MockRaftLogsIface{ctrl: ctrl}
	mock.recorder = &MockRaftLogsIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftLogsIface) EXPECT() *MockRaftLogsIfaceMockRecorder {
	return m.recorder
}

// AppendLog mocks base method.
func (m *MockRaftLogsIface) AppendLog(commands []byte, term int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendLog", commands, term)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendLog indicates an expected call of AppendLog.
func (mr *MockRaftLogsIfaceMockRecorder) AppendLog(commands, term any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendLog", reflect.TypeOf((*MockRaftLogsIface)(nil).AppendLog), commands, term)
}

// AppendLogsInBatch mocks base method.
func (m *MockRaftLogsIface) AppendLogsInBatch(commandList [][]byte, term int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendLogsInBatch", commandList, term)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendLogsInBatch indicates an expected call of AppendLogsInBatch.
func (mr *MockRaftLogsIfaceMockRecorder) AppendLogsInBatch(commandList, term any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendLogsInBatch", reflect.TypeOf((*MockRaftLogsIface)(nil).AppendLogsInBatch), commandList, term)
}

// GetPrevLogIndexAndTerm mocks base method.
func (m *MockRaftLogsIface) GetPrevLogIndexAndTerm() (uint64, uint32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrevLogIndexAndTerm")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint32)
	return ret0, ret1
}

// GetPrevLogIndexAndTerm indicates an expected call of GetPrevLogIndexAndTerm.
func (mr *MockRaftLogsIfaceMockRecorder) GetPrevLogIndexAndTerm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrevLogIndexAndTerm", reflect.TypeOf((*MockRaftLogsIface)(nil).GetPrevLogIndexAndTerm))
}
