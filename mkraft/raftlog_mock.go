// Code generated by MockGen. DO NOT EDIT.
// Source: mkraft/raftlog.go
//
// Generated by this command:
//
//	mockgen -source=mkraft/raftlog.go -destination=./mkraft/raftlog_mock.go -package mkraft
//

// Package mkraft is a generated GoMock package.
package mkraft

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRaftLogsIface is a mock of RaftLogsIface interface.
type MockRaftLogsIface struct {
	ctrl     *gomock.Controller
	recorder *MockRaftLogsIfaceMockRecorder
	isgomock struct{}
}

// MockRaftLogsIfaceMockRecorder is the mock recorder for MockRaftLogsIface.
type MockRaftLogsIfaceMockRecorder struct {
	mock *MockRaftLogsIface
}

// NewMockRaftLogsIface creates a new mock instance.
func NewMockRaftLogsIface(ctrl *gomock.Controller) *MockRaftLogsIface {
	mock := &MockRaftLogsIface{ctrl: ctrl}
	mock.recorder = &MockRaftLogsIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftLogsIface) EXPECT() *MockRaftLogsIfaceMockRecorder {
	return m.recorder
}

// AppendLogsInBatch mocks base method.
func (m *MockRaftLogsIface) AppendLogsInBatch(ctx context.Context, commandList [][]byte, term int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendLogsInBatch", ctx, commandList, term)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendLogsInBatch indicates an expected call of AppendLogsInBatch.
func (mr *MockRaftLogsIfaceMockRecorder) AppendLogsInBatch(ctx, commandList, term any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendLogsInBatch", reflect.TypeOf((*MockRaftLogsIface)(nil).AppendLogsInBatch), ctx, commandList, term)
}

// GetLastLogIdx mocks base method.
func (m *MockRaftLogsIface) GetLastLogIdx() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastLogIdx")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLastLogIdx indicates an expected call of GetLastLogIdx.
func (mr *MockRaftLogsIfaceMockRecorder) GetLastLogIdx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastLogIdx", reflect.TypeOf((*MockRaftLogsIface)(nil).GetLastLogIdx))
}

// GetLastLogIdxAndTerm mocks base method.
func (m *MockRaftLogsIface) GetLastLogIdxAndTerm() (uint64, uint32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastLogIdxAndTerm")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint32)
	return ret0, ret1
}

// GetLastLogIdxAndTerm indicates an expected call of GetLastLogIdxAndTerm.
func (mr *MockRaftLogsIfaceMockRecorder) GetLastLogIdxAndTerm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastLogIdxAndTerm", reflect.TypeOf((*MockRaftLogsIface)(nil).GetLastLogIdxAndTerm))
}

// GetLogsFromIdx mocks base method.
func (m *MockRaftLogsIface) GetLogsFromIdx(index uint64) ([]*RaftLogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogsFromIdx", index)
	ret0, _ := ret[0].([]*RaftLogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogsFromIdx indicates an expected call of GetLogsFromIdx.
func (mr *MockRaftLogsIfaceMockRecorder) GetLogsFromIdx(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogsFromIdx", reflect.TypeOf((*MockRaftLogsIface)(nil).GetLogsFromIdx), index)
}

// GetTermByIndex mocks base method.
func (m *MockRaftLogsIface) GetTermByIndex(index uint64) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTermByIndex", index)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermByIndex indicates an expected call of GetTermByIndex.
func (mr *MockRaftLogsIfaceMockRecorder) GetTermByIndex(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermByIndex", reflect.TypeOf((*MockRaftLogsIface)(nil).GetTermByIndex), index)
}
