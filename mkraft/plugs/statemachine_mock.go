// Code generated by MockGen. DO NOT EDIT.
// Source: mkraft/plugs/statemachine.go
//
// Generated by this command:
//
//	mockgen -source=mkraft/plugs/statemachine.go -destination=./mkraft/plugs/statemachine_mock.go -package plugs
//

// Package plugs is a generated GoMock package.
package plugs

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStateMachineIface is a mock of StateMachineIface interface.
type MockStateMachineIface struct {
	ctrl     *gomock.Controller
	recorder *MockStateMachineIfaceMockRecorder
	isgomock struct{}
}

// MockStateMachineIfaceMockRecorder is the mock recorder for MockStateMachineIface.
type MockStateMachineIfaceMockRecorder struct {
	mock *MockStateMachineIface
}

// NewMockStateMachineIface creates a new mock instance.
func NewMockStateMachineIface(ctrl *gomock.Controller) *MockStateMachineIface {
	mock := &MockStateMachineIface{ctrl: ctrl}
	mock.recorder = &MockStateMachineIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateMachineIface) EXPECT() *MockStateMachineIfaceMockRecorder {
	return m.recorder
}

// ApplyCommand mocks base method.
func (m *MockStateMachineIface) ApplyCommand(command []byte, index uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyCommand", command, index)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyCommand indicates an expected call of ApplyCommand.
func (mr *MockStateMachineIfaceMockRecorder) ApplyCommand(command, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyCommand", reflect.TypeOf((*MockStateMachineIface)(nil).ApplyCommand), command, index)
}

// BatchApplyCommand mocks base method.
func (m *MockStateMachineIface) BatchApplyCommand(commandList [][]byte, index uint64) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchApplyCommand", commandList, index)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchApplyCommand indicates an expected call of BatchApplyCommand.
func (mr *MockStateMachineIfaceMockRecorder) BatchApplyCommand(commandList, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchApplyCommand", reflect.TypeOf((*MockStateMachineIface)(nil).BatchApplyCommand), commandList, index)
}

// GetLatestAppliedIndex mocks base method.
func (m *MockStateMachineIface) GetLatestAppliedIndex() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAppliedIndex")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLatestAppliedIndex indicates an expected call of GetLatestAppliedIndex.
func (mr *MockStateMachineIfaceMockRecorder) GetLatestAppliedIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAppliedIndex", reflect.TypeOf((*MockStateMachineIface)(nil).GetLatestAppliedIndex))
}
