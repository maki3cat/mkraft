// Code generated by MockGen. DO NOT EDIT.
// Source: mkraft/plugs/statemachine.go
//
// Generated by this command:
//
//	mockgen -source=mkraft/plugs/statemachine.go -destination=./mkraft/plugs/statemachine_mock.go -package plugs
//

// Package plugs is a generated GoMock package.
package plugs

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStateMachine is a mock of StateMachine interface.
type MockStateMachine struct {
	ctrl     *gomock.Controller
	recorder *MockStateMachineMockRecorder
	isgomock struct{}
}

// MockStateMachineMockRecorder is the mock recorder for MockStateMachine.
type MockStateMachineMockRecorder struct {
	mock *MockStateMachine
}

// NewMockStateMachine creates a new mock instance.
func NewMockStateMachine(ctrl *gomock.Controller) *MockStateMachine {
	mock := &MockStateMachine{ctrl: ctrl}
	mock.recorder = &MockStateMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateMachine) EXPECT() *MockStateMachineMockRecorder {
	return m.recorder
}

// ApplyCommand mocks base method.
func (m *MockStateMachine) ApplyCommand(ctx context.Context, command []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyCommand", ctx, command)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyCommand indicates an expected call of ApplyCommand.
func (mr *MockStateMachineMockRecorder) ApplyCommand(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyCommand", reflect.TypeOf((*MockStateMachine)(nil).ApplyCommand), ctx, command)
}

// BatchApplyCommand mocks base method.
func (m *MockStateMachine) BatchApplyCommand(ctx context.Context, commandList [][]byte) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchApplyCommand", ctx, commandList)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchApplyCommand indicates an expected call of BatchApplyCommand.
func (mr *MockStateMachineMockRecorder) BatchApplyCommand(ctx, commandList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchApplyCommand", reflect.TypeOf((*MockStateMachine)(nil).BatchApplyCommand), ctx, commandList)
}

// Close mocks base method.
func (m *MockStateMachine) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStateMachineMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStateMachine)(nil).Close))
}
