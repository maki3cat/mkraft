// Code generated by MockGen. DO NOT EDIT.
// Source: mkraft/log/serde.go
//
// Generated by this command:
//
//	mockgen -source=mkraft/log/serde.go -destination=./mkraft/log/serde_mock.go -package log
//

// Package log is a generated GoMock package.
package log

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRaftSerde is a mock of RaftSerde interface.
type MockRaftSerde struct {
	ctrl     *gomock.Controller
	recorder *MockRaftSerdeMockRecorder
	isgomock struct{}
}

// MockRaftSerdeMockRecorder is the mock recorder for MockRaftSerde.
type MockRaftSerdeMockRecorder struct {
	mock *MockRaftSerde
}

// NewMockRaftSerde creates a new mock instance.
func NewMockRaftSerde(ctrl *gomock.Controller) *MockRaftSerde {
	mock := &MockRaftSerde{ctrl: ctrl}
	mock.recorder = &MockRaftSerdeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftSerde) EXPECT() *MockRaftSerdeMockRecorder {
	return m.recorder
}

// BatchDeserialize mocks base method.
func (m *MockRaftSerde) BatchDeserialize(data []byte) ([]*RaftLogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeserialize", data)
	ret0, _ := ret[0].([]*RaftLogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeserialize indicates an expected call of BatchDeserialize.
func (mr *MockRaftSerdeMockRecorder) BatchDeserialize(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeserialize", reflect.TypeOf((*MockRaftSerde)(nil).BatchDeserialize), data)
}

// BatchSerialize mocks base method.
func (m *MockRaftSerde) BatchSerialize(entries []*RaftLogEntry) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSerialize", entries)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSerialize indicates an expected call of BatchSerialize.
func (mr *MockRaftSerdeMockRecorder) BatchSerialize(entries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSerialize", reflect.TypeOf((*MockRaftSerde)(nil).BatchSerialize), entries)
}

// LogDeserialize mocks base method.
func (m *MockRaftSerde) LogDeserialize(data []byte) (*RaftLogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogDeserialize", data)
	ret0, _ := ret[0].(*RaftLogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogDeserialize indicates an expected call of LogDeserialize.
func (mr *MockRaftSerdeMockRecorder) LogDeserialize(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogDeserialize", reflect.TypeOf((*MockRaftSerde)(nil).LogDeserialize), data)
}

// LogSerialize mocks base method.
func (m *MockRaftSerde) LogSerialize(entry *RaftLogEntry) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogSerialize", entry)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogSerialize indicates an expected call of LogSerialize.
func (mr *MockRaftSerdeMockRecorder) LogSerialize(entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogSerialize", reflect.TypeOf((*MockRaftSerde)(nil).LogSerialize), entry)
}
