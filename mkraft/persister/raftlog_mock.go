// Code generated by MockGen. DO NOT EDIT.
// Source: mkraft/persister/raftlog.go
//
// Generated by this command:
//
//	mockgen -source=mkraft/persister/raftlog.go -destination=./mkraft/persister/raftlog_mock.go -package persister
//

// Package persister is a generated GoMock package.
package persister

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRaftLogs is a mock of RaftLogs interface.
type MockRaftLogs struct {
	ctrl     *gomock.Controller
	recorder *MockRaftLogsMockRecorder
	isgomock struct{}
}

// MockRaftLogsMockRecorder is the mock recorder for MockRaftLogs.
type MockRaftLogsMockRecorder struct {
	mock *MockRaftLogs
}

// NewMockRaftLogs creates a new mock instance.
func NewMockRaftLogs(ctrl *gomock.Controller) *MockRaftLogs {
	mock := &MockRaftLogs{ctrl: ctrl}
	mock.recorder = &MockRaftLogsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftLogs) EXPECT() *MockRaftLogsMockRecorder {
	return m.recorder
}

// AppendLogsInBatch mocks base method.
func (m *MockRaftLogs) AppendLogsInBatch(ctx context.Context, commandList [][]byte, term uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendLogsInBatch", ctx, commandList, term)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendLogsInBatch indicates an expected call of AppendLogsInBatch.
func (mr *MockRaftLogsMockRecorder) AppendLogsInBatch(ctx, commandList, term any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendLogsInBatch", reflect.TypeOf((*MockRaftLogs)(nil).AppendLogsInBatch), ctx, commandList, term)
}

// CheckPreLog mocks base method.
func (m *MockRaftLogs) CheckPreLog(preLogIndex uint64, term uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPreLog", preLogIndex, term)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPreLog indicates an expected call of CheckPreLog.
func (mr *MockRaftLogsMockRecorder) CheckPreLog(preLogIndex, term any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPreLog", reflect.TypeOf((*MockRaftLogs)(nil).CheckPreLog), preLogIndex, term)
}

// GetLastLogIdx mocks base method.
func (m *MockRaftLogs) GetLastLogIdx() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastLogIdx")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLastLogIdx indicates an expected call of GetLastLogIdx.
func (mr *MockRaftLogsMockRecorder) GetLastLogIdx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastLogIdx", reflect.TypeOf((*MockRaftLogs)(nil).GetLastLogIdx))
}

// GetLastLogIdxAndTerm mocks base method.
func (m *MockRaftLogs) GetLastLogIdxAndTerm() (uint64, uint32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastLogIdxAndTerm")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint32)
	return ret0, ret1
}

// GetLastLogIdxAndTerm indicates an expected call of GetLastLogIdxAndTerm.
func (mr *MockRaftLogsMockRecorder) GetLastLogIdxAndTerm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastLogIdxAndTerm", reflect.TypeOf((*MockRaftLogs)(nil).GetLastLogIdxAndTerm))
}

// GetLogs mocks base method.
func (m *MockRaftLogs) GetLogs(nextIdx uint64, maxLen int) ([]*RaftLogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", nextIdx, maxLen)
	ret0, _ := ret[0].([]*RaftLogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockRaftLogsMockRecorder) GetLogs(nextIdx, maxLen any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockRaftLogs)(nil).GetLogs), nextIdx, maxLen)
}

// GetTermByIndex mocks base method.
func (m *MockRaftLogs) GetTermByIndex(index uint64) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTermByIndex", index)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermByIndex indicates an expected call of GetTermByIndex.
func (mr *MockRaftLogsMockRecorder) GetTermByIndex(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermByIndex", reflect.TypeOf((*MockRaftLogs)(nil).GetTermByIndex), index)
}

// ReadLogsInBatchFromIdx mocks base method.
func (m *MockRaftLogs) ReadLogsInBatchFromIdx(nextIdx uint64) ([]*RaftLogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLogsInBatchFromIdx", nextIdx)
	ret0, _ := ret[0].([]*RaftLogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLogsInBatchFromIdx indicates an expected call of ReadLogsInBatchFromIdx.
func (mr *MockRaftLogsMockRecorder) ReadLogsInBatchFromIdx(nextIdx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLogsInBatchFromIdx", reflect.TypeOf((*MockRaftLogs)(nil).ReadLogsInBatchFromIdx), nextIdx)
}

// UpdateLogsInBatch mocks base method.
func (m *MockRaftLogs) UpdateLogsInBatch(ctx context.Context, preLogIndex uint64, commandList [][]byte, term uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogsInBatch", ctx, preLogIndex, commandList, term)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLogsInBatch indicates an expected call of UpdateLogsInBatch.
func (mr *MockRaftLogsMockRecorder) UpdateLogsInBatch(ctx, preLogIndex, commandList, term any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogsInBatch", reflect.TypeOf((*MockRaftLogs)(nil).UpdateLogsInBatch), ctx, preLogIndex, commandList, term)
}
