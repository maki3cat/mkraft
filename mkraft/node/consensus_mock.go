// Code generated by MockGen. DO NOT EDIT.
// Source: mkraft/node/consensus.go
//
// Generated by this command:
//
//	mockgen -source=mkraft/node/consensus.go -destination=./mkraft/node/consensus_mock.go -package node
//

// Package node is a generated GoMock package.
package node

import (
	context "context"
	reflect "reflect"

	rpc "github.com/maki3cat/mkraft/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockConsensus is a mock of Consensus interface.
type MockConsensus struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusMockRecorder
	isgomock struct{}
}

// MockConsensusMockRecorder is the mock recorder for MockConsensus.
type MockConsensusMockRecorder struct {
	mock *MockConsensus
}

// NewMockConsensus creates a new mock instance.
func NewMockConsensus(ctrl *gomock.Controller) *MockConsensus {
	mock := &MockConsensus{ctrl: ctrl}
	mock.recorder = &MockConsensusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensus) EXPECT() *MockConsensusMockRecorder {
	return m.recorder
}

// ConsensusRequestVote mocks base method.
func (m *MockConsensus) ConsensusRequestVote(ctx context.Context, request *rpc.RequestVoteRequest) *MajorityRequestVoteResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusRequestVote", ctx, request)
	ret0, _ := ret[0].(*MajorityRequestVoteResp)
	return ret0
}

// ConsensusRequestVote indicates an expected call of ConsensusRequestVote.
func (mr *MockConsensusMockRecorder) ConsensusRequestVote(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusRequestVote", reflect.TypeOf((*MockConsensus)(nil).ConsensusRequestVote), ctx, request)
}
