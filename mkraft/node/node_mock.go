// Code generated by MockGen. DO NOT EDIT.
// Source: mkraft/node/node.go
//
// Generated by this command:
//
//	mockgen -source=mkraft/node/node.go -destination=./mkraft/node/node_mock.go -package node
//

// Package node is a generated GoMock package.
package node

import (
	context "context"
	reflect "reflect"

	utils "github.com/maki3cat/mkraft/mkraft/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
	isgomock struct{}
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// AppendEntryRequest mocks base method.
func (m *MockNode) AppendEntryRequest(req *utils.AppendEntriesInternalReq) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendEntryRequest", req)
}

// AppendEntryRequest indicates an expected call of AppendEntryRequest.
func (mr *MockNodeMockRecorder) AppendEntryRequest(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntryRequest", reflect.TypeOf((*MockNode)(nil).AppendEntryRequest), req)
}

// ClientCommand mocks base method.
func (m *MockNode) ClientCommand(req *utils.ClientCommandInternalReq) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClientCommand", req)
}

// ClientCommand indicates an expected call of ClientCommand.
func (mr *MockNodeMockRecorder) ClientCommand(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientCommand", reflect.TypeOf((*MockNode)(nil).ClientCommand), req)
}

// GracefulStop mocks base method.
func (m *MockNode) GracefulStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GracefulStop")
}

// GracefulStop indicates an expected call of GracefulStop.
func (mr *MockNodeMockRecorder) GracefulStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulStop", reflect.TypeOf((*MockNode)(nil).GracefulStop))
}

// Start mocks base method.
func (m *MockNode) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockNodeMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNode)(nil).Start), ctx)
}

// VoteRequest mocks base method.
func (m *MockNode) VoteRequest(req *utils.RequestVoteInternalReq) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VoteRequest", req)
}

// VoteRequest indicates an expected call of VoteRequest.
func (mr *MockNodeMockRecorder) VoteRequest(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteRequest", reflect.TypeOf((*MockNode)(nil).VoteRequest), req)
}
