// Code generated by MockGen. DO NOT EDIT.
// Source: rpc/service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=rpc/service_grpc.pb.go -destination=./rpc/service_mock.go -package rpc
//

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRaftServiceClient is a mock of RaftServiceClient interface.
type MockRaftServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRaftServiceClientMockRecorder
	isgomock struct{}
}

// MockRaftServiceClientMockRecorder is the mock recorder for MockRaftServiceClient.
type MockRaftServiceClientMockRecorder struct {
	mock *MockRaftServiceClient
}

// NewMockRaftServiceClient creates a new mock instance.
func NewMockRaftServiceClient(ctrl *gomock.Controller) *MockRaftServiceClient {
	mock := &MockRaftServiceClient{ctrl: ctrl}
	mock.recorder = &MockRaftServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftServiceClient) EXPECT() *MockRaftServiceClientMockRecorder {
	return m.recorder
}

// AppendEntries mocks base method.
func (m *MockRaftServiceClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AppendEntries", varargs...)
	ret0, _ := ret[0].(*AppendEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEntries indicates an expected call of AppendEntries.
func (mr *MockRaftServiceClientMockRecorder) AppendEntries(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntries", reflect.TypeOf((*MockRaftServiceClient)(nil).AppendEntries), varargs...)
}

// ClientCommand mocks base method.
func (m *MockRaftServiceClient) ClientCommand(ctx context.Context, in *ClientCommandRequest, opts ...grpc.CallOption) (*ClientCommandResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClientCommand", varargs...)
	ret0, _ := ret[0].(*ClientCommandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientCommand indicates an expected call of ClientCommand.
func (mr *MockRaftServiceClientMockRecorder) ClientCommand(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientCommand", reflect.TypeOf((*MockRaftServiceClient)(nil).ClientCommand), varargs...)
}

// RequestVote mocks base method.
func (m *MockRaftServiceClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestVote", varargs...)
	ret0, _ := ret[0].(*RequestVoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVote indicates an expected call of RequestVote.
func (mr *MockRaftServiceClientMockRecorder) RequestVote(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVote", reflect.TypeOf((*MockRaftServiceClient)(nil).RequestVote), varargs...)
}

// SayHello mocks base method.
func (m *MockRaftServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockRaftServiceClientMockRecorder) SayHello(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockRaftServiceClient)(nil).SayHello), varargs...)
}

// MockRaftServiceServer is a mock of RaftServiceServer interface.
type MockRaftServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRaftServiceServerMockRecorder
	isgomock struct{}
}

// MockRaftServiceServerMockRecorder is the mock recorder for MockRaftServiceServer.
type MockRaftServiceServerMockRecorder struct {
	mock *MockRaftServiceServer
}

// NewMockRaftServiceServer creates a new mock instance.
func NewMockRaftServiceServer(ctrl *gomock.Controller) *MockRaftServiceServer {
	mock := &MockRaftServiceServer{ctrl: ctrl}
	mock.recorder = &MockRaftServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftServiceServer) EXPECT() *MockRaftServiceServerMockRecorder {
	return m.recorder
}

// AppendEntries mocks base method.
func (m *MockRaftServiceServer) AppendEntries(arg0 context.Context, arg1 *AppendEntriesRequest) (*AppendEntriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendEntries", arg0, arg1)
	ret0, _ := ret[0].(*AppendEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEntries indicates an expected call of AppendEntries.
func (mr *MockRaftServiceServerMockRecorder) AppendEntries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntries", reflect.TypeOf((*MockRaftServiceServer)(nil).AppendEntries), arg0, arg1)
}

// ClientCommand mocks base method.
func (m *MockRaftServiceServer) ClientCommand(arg0 context.Context, arg1 *ClientCommandRequest) (*ClientCommandResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientCommand", arg0, arg1)
	ret0, _ := ret[0].(*ClientCommandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientCommand indicates an expected call of ClientCommand.
func (mr *MockRaftServiceServerMockRecorder) ClientCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientCommand", reflect.TypeOf((*MockRaftServiceServer)(nil).ClientCommand), arg0, arg1)
}

// RequestVote mocks base method.
func (m *MockRaftServiceServer) RequestVote(arg0 context.Context, arg1 *RequestVoteRequest) (*RequestVoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestVote", arg0, arg1)
	ret0, _ := ret[0].(*RequestVoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVote indicates an expected call of RequestVote.
func (mr *MockRaftServiceServerMockRecorder) RequestVote(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVote", reflect.TypeOf((*MockRaftServiceServer)(nil).RequestVote), arg0, arg1)
}

// SayHello mocks base method.
func (m *MockRaftServiceServer) SayHello(arg0 context.Context, arg1 *HelloRequest) (*HelloReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHello", arg0, arg1)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockRaftServiceServerMockRecorder) SayHello(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockRaftServiceServer)(nil).SayHello), arg0, arg1)
}

// mustEmbedUnimplementedRaftServiceServer mocks base method.
func (m *MockRaftServiceServer) mustEmbedUnimplementedRaftServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRaftServiceServer")
}

// mustEmbedUnimplementedRaftServiceServer indicates an expected call of mustEmbedUnimplementedRaftServiceServer.
func (mr *MockRaftServiceServerMockRecorder) mustEmbedUnimplementedRaftServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRaftServiceServer", reflect.TypeOf((*MockRaftServiceServer)(nil).mustEmbedUnimplementedRaftServiceServer))
}

// MockUnsafeRaftServiceServer is a mock of UnsafeRaftServiceServer interface.
type MockUnsafeRaftServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRaftServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeRaftServiceServerMockRecorder is the mock recorder for MockUnsafeRaftServiceServer.
type MockUnsafeRaftServiceServerMockRecorder struct {
	mock *MockUnsafeRaftServiceServer
}

// NewMockUnsafeRaftServiceServer creates a new mock instance.
func NewMockUnsafeRaftServiceServer(ctrl *gomock.Controller) *MockUnsafeRaftServiceServer {
	mock := &MockUnsafeRaftServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRaftServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRaftServiceServer) EXPECT() *MockUnsafeRaftServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRaftServiceServer mocks base method.
func (m *MockUnsafeRaftServiceServer) mustEmbedUnimplementedRaftServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRaftServiceServer")
}

// mustEmbedUnimplementedRaftServiceServer indicates an expected call of mustEmbedUnimplementedRaftServiceServer.
func (mr *MockUnsafeRaftServiceServerMockRecorder) mustEmbedUnimplementedRaftServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRaftServiceServer", reflect.TypeOf((*MockUnsafeRaftServiceServer)(nil).mustEmbedUnimplementedRaftServiceServer))
}
