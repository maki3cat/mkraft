// Code generated by MockGen. DO NOT EDIT.
// Source: common/config.go
//
// Generated by this command:
//
//	mockgen -source=common/config.go -destination=./common/config_mock.go -package common
//

// Package common is a generated GoMock package.
package common

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigIface is a mock of ConfigIface interface.
type MockConfigIface struct {
	ctrl     *gomock.Controller
	recorder *MockConfigIfaceMockRecorder
	isgomock struct{}
}

// MockConfigIfaceMockRecorder is the mock recorder for MockConfigIface.
type MockConfigIfaceMockRecorder struct {
	mock *MockConfigIface
}

// NewMockConfigIface creates a new mock instance.
func NewMockConfigIface(ctrl *gomock.Controller) *MockConfigIface {
	mock := &MockConfigIface{ctrl: ctrl}
	mock.recorder = &MockConfigIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigIface) EXPECT() *MockConfigIfaceMockRecorder {
	return m.recorder
}

// GetClusterSize mocks base method.
func (m *MockConfigIface) GetClusterSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetClusterSize indicates an expected call of GetClusterSize.
func (mr *MockConfigIfaceMockRecorder) GetClusterSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterSize", reflect.TypeOf((*MockConfigIface)(nil).GetClusterSize))
}

// GetElectionTimeout mocks base method.
func (m *MockConfigIface) GetElectionTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElectionTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetElectionTimeout indicates an expected call of GetElectionTimeout.
func (mr *MockConfigIfaceMockRecorder) GetElectionTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElectionTimeout", reflect.TypeOf((*MockConfigIface)(nil).GetElectionTimeout))
}

// GetGracefulShutdownTimeout mocks base method.
func (m *MockConfigIface) GetGracefulShutdownTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGracefulShutdownTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetGracefulShutdownTimeout indicates an expected call of GetGracefulShutdownTimeout.
func (mr *MockConfigIfaceMockRecorder) GetGracefulShutdownTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGracefulShutdownTimeout", reflect.TypeOf((*MockConfigIface)(nil).GetGracefulShutdownTimeout))
}

// GetLeaderHeartbeatPeriod mocks base method.
func (m *MockConfigIface) GetLeaderHeartbeatPeriod() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderHeartbeatPeriod")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetLeaderHeartbeatPeriod indicates an expected call of GetLeaderHeartbeatPeriod.
func (mr *MockConfigIfaceMockRecorder) GetLeaderHeartbeatPeriod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderHeartbeatPeriod", reflect.TypeOf((*MockConfigIface)(nil).GetLeaderHeartbeatPeriod))
}

// GetMembership mocks base method.
func (m *MockConfigIface) GetMembership() Membership {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembership")
	ret0, _ := ret[0].(Membership)
	return ret0
}

// GetMembership indicates an expected call of GetMembership.
func (mr *MockConfigIfaceMockRecorder) GetMembership() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembership", reflect.TypeOf((*MockConfigIface)(nil).GetMembership))
}

// GetMinRemainingTimeForRPC mocks base method.
func (m *MockConfigIface) GetMinRemainingTimeForRPC() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinRemainingTimeForRPC")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetMinRemainingTimeForRPC indicates an expected call of GetMinRemainingTimeForRPC.
func (mr *MockConfigIfaceMockRecorder) GetMinRemainingTimeForRPC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinRemainingTimeForRPC", reflect.TypeOf((*MockConfigIface)(nil).GetMinRemainingTimeForRPC))
}

// GetRPCRequestTimeout mocks base method.
func (m *MockConfigIface) GetRPCRequestTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRPCRequestTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRPCRequestTimeout indicates an expected call of GetRPCRequestTimeout.
func (mr *MockConfigIfaceMockRecorder) GetRPCRequestTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRPCRequestTimeout", reflect.TypeOf((*MockConfigIface)(nil).GetRPCRequestTimeout))
}

// GetRaftLogFilePath mocks base method.
func (m *MockConfigIface) GetRaftLogFilePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaftLogFilePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRaftLogFilePath indicates an expected call of GetRaftLogFilePath.
func (mr *MockConfigIfaceMockRecorder) GetRaftLogFilePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaftLogFilePath", reflect.TypeOf((*MockConfigIface)(nil).GetRaftLogFilePath))
}

// GetRaftNodeRequestBufferSize mocks base method.
func (m *MockConfigIface) GetRaftNodeRequestBufferSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaftNodeRequestBufferSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRaftNodeRequestBufferSize indicates an expected call of GetRaftNodeRequestBufferSize.
func (mr *MockConfigIfaceMockRecorder) GetRaftNodeRequestBufferSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaftNodeRequestBufferSize", reflect.TypeOf((*MockConfigIface)(nil).GetRaftNodeRequestBufferSize))
}

// GetgRPCServiceConf mocks base method.
func (m *MockConfigIface) GetgRPCServiceConf() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetgRPCServiceConf")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetgRPCServiceConf indicates an expected call of GetgRPCServiceConf.
func (mr *MockConfigIfaceMockRecorder) GetgRPCServiceConf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetgRPCServiceConf", reflect.TypeOf((*MockConfigIface)(nil).GetgRPCServiceConf))
}

// String mocks base method.
func (m *MockConfigIface) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockConfigIfaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockConfigIface)(nil).String))
}

// Validate mocks base method.
func (m *MockConfigIface) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockConfigIfaceMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockConfigIface)(nil).Validate))
}
